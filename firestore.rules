
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions for validation
    function validateUserCreateData(data) {
      return data.uid == request.auth.uid &&
             data.email == request.auth.email &&
             data.displayName is string && data.displayName.size() > 0 &&
             data.createdAt == request.time &&
             data.visibility == 'public';
    }

    // Users collection
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId && validateUserCreateData(request.resource.data);
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if false;
    }

    // Conversations collection
    match /conversations/{conversationId} {
      allow read, update, delete: if request.auth != null && request.auth.uid in resource.data.participantIds;
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participantIds;

      // Messages subcollection
      match /messages/{messageId} {
        allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
        allow update, delete: if false;
      }
    }

    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if request.auth != null
                    && request.resource.data.userId == request.auth.uid
                    && request.resource.data.rating is number
                    && request.resource.data.rating >= 1 && request.resource.data.rating <= 5
                    && request.resource.data.text is string
                    && request.resource.data.text.size() > 0 && request.resource.data.text.size() <= 1000
                    && request.resource.data.userName is string
                    && request.resource.data.createdAt == request.time;
      allow update, delete: if false;
    }
  }
}

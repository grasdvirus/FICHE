rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // === UTILITY FUNCTIONS ===
    function getConversationParticipants(conversationId) {
      return get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
    }

    // === MAIN RULES ===

    match /users/{userId} {
      allow read: if request.auth != null;
      
      // Allow create and update only by the authenticated user for their own document.
      // This is a more robust and simpler rule to avoid auth issues.
      allow write: if request.auth != null && request.auth.uid == userId;

      // Allow a user to delete their own account.
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    match /conversations/{conversationId} {
      allow get: if request.auth != null && 
                    (request.auth.uid in conversationId.split('_'));

      allow read: if request.auth != null && 
                      request.auth.uid in resource.data.participantIds;
      
      allow create: if request.auth != null && 
                        request.auth.uid in request.resource.data.participantIds;
      
      allow update: if request.auth != null && 
                        request.auth.uid in resource.data.participantIds;
      
      // Allow any participant to delete the conversation.
      allow delete: if request.auth != null && 
                       request.auth.uid in resource.data.participantIds;
    }
    
    match /conversations/{conversationId}/messages/{messageId} {
      allow read: if request.auth != null && 
                      request.auth.uid in getConversationParticipants(conversationId);
      
      allow create: if request.auth != null && 
                        request.auth.uid == request.resource.data.senderId &&
                        request.auth.uid in getConversationParticipants(conversationId);
      
      allow update: if request.auth != null &&
                      request.auth.uid in getConversationParticipants(conversationId);
      
      // Allow any participant to delete any message (required for deleting a conversation).
      allow delete: if request.auth != null && 
                        request.auth.uid in getConversationParticipants(conversationId);
    }
  }
}

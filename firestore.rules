rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // === RÈGLES POUR LES UTILISATEURS ===
    match /users/{userId} {
      // Un utilisateur peut lire et écrire ses propres données
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // Permet la lecture publique des profils pour l'affichage (noms, avatars)
      allow read: if request.auth != null;
    }
    
    // === RÈGLES POUR LES CONVERSATIONS ===
    match /conversations/{conversationId} {
      // Permission 'get' pour permettre au code de vérifier si une conversation existe
      // C'est sécurisé car l'ID de conversation est composé des UID des participants.
      // Un utilisateur ne peut vérifier que les conversations où il est impliqué.
      allow get: if request.auth != null && request.auth.uid in conversationId.split('_');

      // Les participants peuvent lire la conversation (pour les listes/requêtes)
      allow list: if request.auth != null && request.auth.uid in resource.data.participants;
      
      // Création de nouvelles conversations
      allow create: if request.auth != null && 
                       request.auth.uid in request.resource.data.participants &&
                       validateConversationData(request.resource.data);
      
      // Mise à jour des métadonnées de conversation (dernier message, etc.)
      allow update: if request.auth != null && 
                       request.auth.uid in resource.data.participants &&
                       validateConversationUpdate(request.resource.data, resource.data);
      
      // Suppression uniquement par un admin (si vous en avez un)
      allow delete: if false; // Pour l'instant, personne ne peut supprimer une conversation
    }
    
    // === RÈGLES POUR LES MESSAGES ===
    match /conversations/{conversationId}/messages/{messageId} {
      // Les participants peuvent lire les messages
      // La permission est héritée de la conversation parente
      allow list, get: if request.auth != null && 
                     request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      
      // Création de nouveaux messages
      allow create: if request.auth != null && 
                       request.auth.uid == request.resource.data.senderId &&
                       request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants &&
                       validateMessageData(request.resource.data);
      
      // La modification et la suppression ne sont pas implémentées pour l'instant
      allow update, delete: if false;
    }
    
    // === FONCTIONS DE VALIDATION (simplifiées pour la robustesse) ===
    function validateConversationData(data) {
      return data.keys().hasAll(['participants', 'createdAt', 'type', 'participantIds', 'lastMessage', 'updatedAt']) &&
             data.participants is list &&
             data.participants.size() == 2 && // Uniquement pour les conversations directes
             data.type == 'direct';
    }
    
    function validateConversationUpdate(newData, oldData) {
      // On s'assure que les participants ne peuvent pas être changés après la création
      // et que seuls 'lastMessage' et 'updatedAt' sont modifiés.
      return newData.participants == oldData.participants &&
             newData.createdAt == oldData.createdAt &&
             newData.type == oldData.type;
    }
    
    function validateMessageData(data) {
      return data.keys().hasAll(['content', 'senderId', 'timestamp', 'type']) &&
             data.content is string &&
             data.senderId is string &&
             data.type == 'text' &&
             data.content.size() >= 1 &&
             data.content.size() <= 5000;
    }
  }
}

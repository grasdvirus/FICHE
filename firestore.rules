rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function getConversationParticipants(conversationId) {
      return get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
    }

    // Rule to validate the core user data fields.
    function validateUserCoreData(data) {
        return data.uid == request.auth.uid &&
            data.displayName is string &&
            (data.email is string || data.email == null) &&
            (data.photoURL is string || data.photoURL == null) &&
            data.isVerified is bool &&
            data.visibility == 'public';
    }

    // Rule for user documents
    match /users/{userId} {
      allow read: if request.auth != null;

      // A user can create their own profile if the data is valid.
      // We explicitly check for the server timestamp to be the creation time.
      allow create: if request.auth.uid == userId &&
                       validateUserCoreData(request.resource.data) &&
                       request.resource.data.keys().hasOnly(['uid', 'displayName', 'email', 'photoURL', 'createdAt', 'isVerified', 'visibility']) &&
                       request.resource.data.createdAt == request.time;

      // A user can update their own profile, but cannot change their uid or createdAt timestamp.
      allow update: if request.auth.uid == userId &&
                       validateUserCoreData(request.resource.data) &&
                       request.resource.data.uid == resource.data.uid &&
                       request.resource.data.createdAt == resource.data.createdAt;

      // A user can delete their own profile
      allow delete: if request.auth.uid == userId;
    }

    // Rule for conversation documents
    match /conversations/{conversationId} {
      // Allow reading a single document (get) if the user's UID is in the conversationId.
      // This is crucial for checking if a conversation exists before creating it.
      allow get: if request.auth != null && request.auth.uid in conversationId.split('_');

      // Allow listing documents if the query is correctly filtered by participantIds.
      // Firestore enforces that the `where` clause in the client query matches this rule.
      allow list: if request.auth != null && request.auth.uid in resource.data.participantIds;

      // Participants can update or delete an existing conversation.
      allow update, delete: if request.auth != null && request.auth.uid in resource.data.participantIds;

      // Anyone authenticated can create a conversation, as long as they are a participant.
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participantIds;

      // Rule for message sub-collection
      match /messages/{messageId} {
        // Participants can read all messages in the conversation
        allow read: if request.auth != null && request.auth.uid in getConversationParticipants(conversationId);

        // A participant can create a message
        allow create: if request.auth != null && request.auth.uid == request.resource.data.senderId
                      && request.auth.uid in getConversationParticipants(conversationId);
        
        // A participant can update their own read status on a message
        allow update: if request.auth != null && request.auth.uid in getConversationParticipants(conversationId)
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['readBy']);

        // Any participant can delete any message. This is necessary for deleting the parent conversation.
        allow delete: if request.auth != null && request.auth.uid in getConversationParticipants(conversationId);
      }
    }
  }
}

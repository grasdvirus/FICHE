rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    //============================================================
    // User Profiles
    // Users can read any profile to get display names/avatars,
    // but can only write to their own profile.
    //============================================================
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }

    //============================================================
    // Conversations & Messages
    //============================================================
    match /conversations/{conversationId} {
      // To LIST conversations, a user must be authenticated.
      // The client-side query MUST enforce security by filtering
      // where 'participantIds' contains the user's UID.
      allow list: if request.auth != null;

      // To GET, CREATE, or UPDATE a conversation, the user must be a participant.
      allow get, update: if request.auth.uid in resource.data.participantIds;
      allow create: if request.auth.uid in request.resource.data.participantIds;

      // --- Messages Subcollection ---
      match /messages/{messageId} {
        // To read (list or get) messages, a user must be a participant
        // in the parent conversation document.
        // We use `get()` to check the parent conversation's data.
        allow read: if request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;

        // To create a message, a user must be the sender AND a participant
        // in the parent conversation.
        allow create: if request.resource.data.senderId == request.auth.uid &&
                       request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;

        // Disallow updating/deleting messages for simplicity.
        allow update, delete: if false;
      }
    }

    //============================================================
    // Communities (Placeholder Rules)
    // To be developed later. For now, allow read/write if authenticated.
    //============================================================
    match /communities/{communityId} {
        allow read, write: if request.auth != null;
    }
  }
}

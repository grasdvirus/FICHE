
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Les profils utilisateurs peuvent être lus par tout utilisateur authentifié, mais ne sont modifiables que par leur propriétaire.
    // Cela permet aux utilisateurs de voir les noms/avatars des personnes avec qui ils discutent.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }

    // Un document de conversation...
    match /conversations/{conversationId} {
      // ...peut être lu, mis à jour ou supprimé uniquement par les utilisateurs qui sont des participants.
      allow read, update, delete: if request.auth.uid in resource.data.participantIds;
      // ...ne peut être créé que si l'utilisateur qui le crée est listé comme participant.
      allow create: if request.auth.uid in request.resource.data.participantIds;

      // Les messages sont une sous-collection au sein d'une conversation.
      match /messages/{messageId} {
        // Un utilisateur peut lire les messages s'il est un participant de la conversation parente.
        allow read: if get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds.hasAny([request.auth.uid]);

        // Un utilisateur peut créer un message si :
        // 1. Il est l'expéditeur.
        // 2. Il est un participant de la conversation parente.
        // 3. Le tableau initial 'readBy' ne contient que son propre UID.
        allow create: if request.resource.data.senderId == request.auth.uid
                      && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds.hasAny([request.auth.uid])
                      && request.resource.data.readBy == [request.auth.uid];

        // Un utilisateur peut mettre à jour un message (par exemple, pour ajouter son UID à 'readBy')
        // s'il est un participant de la conversation.
        allow update: if get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds.hasAny([request.auth.uid]);
      }
    }
  }
}
